<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>horsed.github.io</title>
    <atom:link href="http://horsed.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://horsed.github.io</link>
    <description>Tooling, learning</description>
    <pubDate>Thu, 30 Jan 2014 01:00:00 +0100</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>bowerproxy</title>
      <link>http://horsed.github.io/articles/introducing-bowerproxy/</link>
      <pubDate>Thu, 30 Jan 2014 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/introducing-bowerproxy/</guid>
      <author></author>
      <description>&lt;p&gt;When starting to use &lt;a href=&quot;http://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; at work, I soon had to realize, that using &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; might not be an option. Bower fetches components from &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; with &lt;code&gt;SSH&lt;/code&gt;, which got blocked by the corporate proxy. If Bower was able to fetch with &lt;code&gt;HTTPS&lt;/code&gt;, everything would have been fine. Of course, easing the security restriction was not an option :-)&lt;/p&gt;
&lt;p&gt;Instead of arguing about the proxy and why Bower didn’t seem to have a proxy configuration, I quickly hacked together a simple Node webapp to fetch Bower components with. It runs on &lt;a href=&quot;https://www.heroku.com/&quot;&gt;heroku&lt;/a&gt;. The idea was to &lt;code&gt;curl&lt;/code&gt; a component from that webapp, which then actually fetches the component via &lt;a href=&quot;http://bower.io/#programmatic-api&quot;&gt;Bower’s API&lt;/a&gt; and zips it. I curled and unziped via a shell script. Pretty simple. The only thing missing was automatically editing the &lt;code&gt;bower.json&lt;/code&gt;, which doesn’t seem too difficult.&lt;/p&gt;
&lt;p&gt;The hardest part about that webapp was making it failsafe. The earliest versions crashed when Bower threw an error (like it does when you request a component that doesn’t exist) and I’m not sure why, but I wasn’t able to catch those errors. I learned about Node’s &lt;a href=&quot;http://nodejs.org/api/domain.html&quot;&gt;domain module&lt;/a&gt; which was kind of hard figure out at first but really helped with the error handling.&lt;/p&gt;
&lt;p&gt;I’m not using the app today anymore, nor am I coding on it. It was just a small project I started to do something that is new and interesting at least for 2 or 3 evenings.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS learnings pt. 6</title>
      <link>http://horsed.github.io/articles/angularjs-learnings-custom-jquery-events-in-a-dsl/</link>
      <pubDate>Wed, 18 Dec 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/angularjs-learnings-custom-jquery-events-in-a-dsl/</guid>
      <author></author>
      <description>&lt;p&gt;When developing dynamic frontends with jQuery you will most likely be making use of events (e.g. mouseover). In AngularJS this event handling code usually lies in directives. When it comes to testing these directives in e2e tests, you may want to trigger some of these events. Angular uses it’s jqLite for e2e test where you might be looking first for some events you can trigger. But since jqLite is only a subset of jquery it doesn’t provide all events supported by jquery.&lt;/p&gt;
&lt;p&gt;I wanted to e2e test a directive which shows and hides another element when hovering over the directive’s element. I wrote a custom dsl to trigger the &lt;code&gt;mouseover&lt;/code&gt; event on a given element. But the event didn’t seem to fire inside the e2e tests although it worked in the browser. Here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;master&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;show-hide&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;.slave&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;slave&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The e2e test looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;angular.scenario.dsl(&lt;span class=&quot;string&quot;&gt;'mouseover'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(selector)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addFutureAction(&lt;span class=&quot;string&quot;&gt;'Calling mouseover of given element'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($window, $document, done)&lt;/span&gt; {&lt;/span&gt;
      $document.find(selector).trigger(&lt;span class=&quot;string&quot;&gt;'mouseover'&lt;/span&gt;);
      done();
    });
  };
});

...

it(&lt;span class=&quot;string&quot;&gt;'should show slave'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  expect(element(&lt;span class=&quot;string&quot;&gt;'.slave'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'display'&lt;/span&gt;)).toBe(&lt;span class=&quot;string&quot;&gt;'none'&lt;/span&gt;);

  mouseover(&lt;span class=&quot;string&quot;&gt;'.master'&lt;/span&gt;);

  expect(element(&lt;span class=&quot;string&quot;&gt;'.slave'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'display'&lt;/span&gt;)).not().toBe(&lt;span class=&quot;string&quot;&gt;'none'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is with using jQuery in the custom dsl. What I understood so far is that angular’s Scenario Runner runs your app in an iFrame which lies inside a main frame. The main frame has jQuery available, as the Scenario Runner depends on it. So I thought there were no restrictions in using jQuery in a custom dsl. However, the outer jQuery instance cannot bubble up events inside the DOM of the iFrame. So calling &lt;code&gt;trigger&lt;/code&gt; with my custom dsl had no effect inside the iFrame.&lt;/p&gt;
&lt;p&gt;Here is what made it work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;angular.scenario.dsl(&lt;span class=&quot;string&quot;&gt;'mouseover'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(selector)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addFutureAction(&lt;span class=&quot;string&quot;&gt;'Calling mouseover of given element'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($window, $document, done)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elements = $window.angular.element($document.elements());
      elements.trigger(&lt;span class=&quot;string&quot;&gt;'mouseover'&lt;/span&gt;);
      done();
    });
  };
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find some explanatory code &lt;a href=&quot;https://github.com/angular/angular.js/pull/752&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS learnings pt. 5</title>
      <link>http://horsed.github.io/articles/angularjs-learnings-be-careful-using-ngmin/</link>
      <pubDate>Tue, 19 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/angularjs-learnings-be-careful-using-ngmin/</guid>
      <author></author>
      <description>&lt;p&gt;AngularJS brings Dependency Injection into your app. But if you apply minification during your build process, you have to take care of not breaking your DI.&lt;/p&gt;
&lt;p&gt;If you’re using &lt;a href=&quot;http://yeoman.io/&quot;&gt;yeoman&lt;/a&gt; to generate your AngularJS project you’re probably making use of &lt;a href=&quot;http://gruntjs.com/&quot;&gt;grunt&lt;/a&gt; to build everything. The default build configuration runs &lt;a href=&quot;https://github.com/btford/ngmin&quot;&gt;ngmin&lt;/a&gt; for pre-minification of your script files. That means you will have to stick to some conventions for writing controllers, services, filters etc. Take a look at &lt;code&gt;ngmin&lt;/code&gt;. This is what I ran into:&lt;/p&gt;
&lt;p&gt;I defined a controller by hand like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainCtrl&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($scope, $routeParams)&lt;/span&gt; {&lt;/span&gt;
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it got minfied to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainCtrl&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a, b)&lt;/span&gt; {&lt;/span&gt;
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This breaks AngularJSs’ Depedency Injection. So I had to rewrite this to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;'phvApp'&lt;/span&gt;)
  .controller(&lt;span class=&quot;string&quot;&gt;'MainCtrl'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'$scope'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'$routeParams'&lt;/span&gt;,
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($scope, $routeParams)&lt;/span&gt; {&lt;/span&gt;
    ...
  }]);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>ngularJS learnings pt. 4</title>
      <link>http://horsed.github.io/articles/angularjs-learnings-binding-funtion-with-two-way-databinding/</link>
      <pubDate>Fri, 15 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/angularjs-learnings-binding-funtion-with-two-way-databinding/</guid>
      <author></author>
      <description>&lt;p&gt;The binding function used in e2e tests doesn’t work as expected on a two-way-databinding.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;binding()&lt;/code&gt; on a two-way-databinding (like &lt;code&gt;ng-model=&amp;quot;binding-name&amp;quot;&lt;/code&gt;) throws an error message that says &lt;code&gt;Binding selector &amp;#39;binding-name&amp;#39; did not match.&lt;/code&gt;. I don’t know the reason. Maybe I’ll get an explanation on my &lt;a href=&quot;http://stackoverflow.com/questions/18630723/why-doesnt-binding-find-a-two-way-binding-in-an-e2e-test&quot;&gt;stackoverflow question&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS learnings pt. 3</title>
      <link>http://horsed.github.io/articles/angularjs-learnings-custom-jasmine-matchers-for-e2e-tests/</link>
      <pubDate>Sat, 02 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/angularjs-learnings-custom-jasmine-matchers-for-e2e-tests/</guid>
      <author></author>
      <description>&lt;p&gt;How to write a custom Jasmine matcher for yout AngularJS e2e tests&lt;/p&gt;
&lt;p&gt;Writing custom matchers in e2e tests differs from the standard &lt;a href=&quot;https://github.com/pivotal/jasmine/wiki/Matchers#writing-new-matchers&quot;&gt;Jasmine way&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;angular.scenario.matcher(&lt;span class=&quot;string&quot;&gt;'toBeReallyReallyTrue'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.actual === &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about this &lt;a href=&quot;https://groups.google.com/forum/#!msg/angular/lcFXW8uv_P8/3gekqCrzSnEJ&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS learnings pt. 2</title>
      <link>http://horsed.github.io/articles/angularjs-learnings-two-way-databinding-creates-model/</link>
      <pubDate>Sat, 28 Sep 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/angularjs-learnings-two-way-databinding-creates-model/</guid>
      <author></author>
      <description>&lt;p&gt;Did you know that a two-way-databinding will automatically create a model on the scope when you provide a non existing one?&lt;/p&gt;
&lt;p&gt;This is can be tricky, especially when debugging:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;...
$scope.firstname = &lt;span class=&quot;string&quot;&gt;'Alice'&lt;/span&gt;;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;ng-model&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;firstName&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that there is a typo in firstname/firstName.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>AngularJS learnings pt. 1</title>
      <link>http://horsed.github.io/articles/angularjs-learnings-pt.1/</link>
      <pubDate>Tue, 24 Sep 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/angularjs-learnings-pt.1/</guid>
      <author></author>
      <description>&lt;p&gt;This might be a continuous topic. I’m learning AngularJS and there are a few things about it that caused some serious WTFs. I’m writing this stuff down to (hopefully) remember it. So here it goes.&lt;/p&gt;
&lt;h3 id=&quot;test-output&quot;&gt;Test output&lt;/h3&gt;
&lt;p&gt;Ok, this is actually not specific to AngularJS but to Karma/Jasmine. Whenever a test fails due to an unavailable function you get a message like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;TypeError: &amp;#39;undefined&amp;#39; is not a function (evaluating &amp;#39;element(&amp;#39;form&amp;#39;).submit()&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember: It’s the last mentioned function that’s &lt;code&gt;undefined&lt;/code&gt;! So in this case it is the &lt;code&gt;submit&lt;/code&gt; function.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Toggling responsive layout</title>
      <link>http://horsed.github.io/articles/toggling-responsive-layout/</link>
      <pubDate>Sun, 14 Jul 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/toggling-responsive-layout/</guid>
      <author></author>
      <description>&lt;p&gt;Implementing a responsive layout means dealing with multiple screen resolutions and devices in order to provide users an optimal viewing experience. One therefore serves all CSS and markup for all provided viewports within the same page. However, there are some cases where one cannot or doesn’t want to provide a mobile friendly layout. To deal with that, some companies/sites offer links to a desktop version of a particular page or the homepage. But how to do that, when making use of responsive design techniques?&lt;/p&gt;
&lt;p&gt;There is a nice solution for switching between the desktop and mobile layout dynamically, even without a page reload, since all layouts already lie in the page. Since RWD &lt;a href=&quot;http://en.wikipedia.org/wiki/Responsive_web_design#Mobile_first.2C_unobtrusive_JavaScript.2C_and_progressive_enhancement&quot;&gt;emphasizes a mobile first approach&lt;/a&gt;, a responsive layout is responsive by default. One would have to switch to a fixed/desktop layout.
Consider the following responsive CSS snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;820&lt;/span&gt;px&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; only screen and (max-width: &lt;span class=&quot;number&quot;&gt;820&lt;/span&gt;px) &lt;/span&gt;{
  &lt;span class=&quot;class&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.flexible&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An element with a CSS class &lt;code&gt;container&lt;/code&gt; should have a fixed &lt;code&gt;width&lt;/code&gt; of 820px on desktop screens but should have a relative &lt;code&gt;width&lt;/code&gt; when rendered on a smaller screen. As you can see, the 2nd CSS selector matches only elements with CSS classes &lt;code&gt;container&lt;/code&gt; and &lt;code&gt;flexible&lt;/code&gt;. Here is the corresponding markup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;container flexible f&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;lorem ipsum...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The responsiveness defined in the CSS snippet is based on the logical conjunction of &lt;code&gt;(max-width: 820px)&lt;/code&gt; and &lt;code&gt;.flexible&lt;/code&gt;. To turn off the flexibile &lt;code&gt;width&lt;/code&gt; one just needs to remove the CSS class &lt;code&gt;flexible&lt;/code&gt; with a little bit of JavaScript/jQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'#link-to-desktop-version'&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  $(&lt;span class=&quot;string&quot;&gt;'.f'&lt;/span&gt;).each(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(index)&lt;/span&gt; {&lt;/span&gt;
    $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).removeClass(&lt;span class=&quot;string&quot;&gt;'flexible'&lt;/span&gt;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The click handler removes the CSS class &lt;code&gt;flexible&lt;/code&gt; from all elements with the CSS class &lt;code&gt;f&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; is a marker for all elements that need to be considered for the responsiveness.
Now users can switch to a desktop layout by clicking the corresponding link. With a little more jQuery the link could even toggle back &lt;code&gt;flexible&lt;/code&gt;. One could furthermore save the state in the URL fragment or in a cookies, so the user doesn’t switch back to the flexible layout by reloading the page.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Scrolling AjaxLink</title>
      <link>http://horsed.github.io/articles/scrolling-ajaxlink/</link>
      <pubDate>Mon, 01 Jul 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/scrolling-ajaxlink/</guid>
      <author></author>
      <description>&lt;p&gt;I recently came across a browser quirk: A Wicket AjaxLink was supposed to scroll the page to the top after it was clicked. But it didn’t…&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AjaxLink&amp;lt;Void&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;link&quot;&lt;/span&gt;) {
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;(AjaxRequestTarget target) {
    &lt;span class=&quot;comment&quot;&gt;// handle click event&lt;/span&gt;
    target.appendJavaScript(&lt;span class=&quot;string&quot;&gt;&quot;$('html, body').animate({scrollTop: 0}, 100);&quot;&lt;/span&gt;);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;wicket:id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;link&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t provide a href attribute, the anchor will be rendered with a href value of &lt;i&gt;#&lt;/i&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the problem with this is, that if you click on that link (seen in IE 8, 9 and Firefox), the browser &lt;strong&gt;might&lt;/strong&gt; not scroll to the top of the page but to the link (which was not what I wanted). I think this is due to a race condition based on the asynchronous parts of the &lt;i&gt;animate&lt;/i&gt; method and other JavaScript snippets coming with the AJAX repsonse. It seems to me, that browsers differ in the execution timings of these snippets, especially when there are asynchronous parts involved.
I played around with the &lt;i&gt;duration&lt;/i&gt; option of the &lt;i&gt;animate&lt;/i&gt; method and tried to delay it with jQuery’s &lt;i&gt;delay&lt;/i&gt; method. This had different effects in different browsers, of course. The only thing that really helped me, was making the &lt;i&gt;AjaxLink&lt;/i&gt; a &lt;i&gt;span&lt;/i&gt; (or something other than an anchor):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cursor:pointer;cursor:hand;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click me&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, no browser will try to jump anywhere and jQuery scrolls the page to the top.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Extending Apache Wicket pt. 2</title>
      <link>http://horsed.github.io/articles/jquery-ui-tooltip-with-wicket/</link>
      <pubDate>Sun, 09 Jun 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/jquery-ui-tooltip-with-wicket/</guid>
      <author></author>
      <description>&lt;p&gt;There are several integrations of tooltips based on JavaScript libraries in the wicketstuff sub project jWicket. I contributed jWicket-UI-Tooltip to it, an integration of the jQuery UI tooltip widget.&lt;/p&gt;
&lt;p&gt;You can find it &lt;a href=&quot;https://github.com/wicketstuff/core/wiki/jWicket-UI-Tooltip&quot;&gt;here&lt;/a&gt;. The snapshot release is available through Maven like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.wicketstuff&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;wicketstuff-jwicket-ui-tooltip&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.0-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;what-does-it-do-&quot;&gt;What does it do?&lt;/h2&gt;
&lt;p&gt;Using the jQuery UI tooltip widget, you can create tooltips like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;component&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;tooltip content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  this text will have a tooltip by jQuery UI
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  $(document).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    $(&lt;span class=&quot;string&quot;&gt;'#component'&lt;/span&gt;).tooltip({position:{my:&lt;span class=&quot;string&quot;&gt;'center bottom-20'&lt;/span&gt;,at:&lt;span class=&quot;string&quot;&gt;'center top'&lt;/span&gt;}});
  });
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wicketstuff/core/blob/master/jdk-1.6-parent/jwicket-parent/jwicket-ui/jwicket-ui-tooltip/src/main/java/org/wicketstuff/jwicket/ui/tooltip/JQueryUiTooltip.java&quot;&gt;JQueryUiTooltip&lt;/a&gt; is a Wicket Behavior that generates the JavaScript neccessary to create tooltips. It offers an API to configure the tooltip(s). Here are some features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the generated JS uses Wickets JavaScript event system instead of using jQuery’s directly&lt;/li&gt;
&lt;li&gt;the default selector is the markup id of the component, the JQueryUiTooltip was added to, or &lt;code&gt;document&lt;/code&gt; when it was added to a page&lt;/li&gt;
&lt;li&gt;one tooltip configuration for multiple elements having tooltip: add JQueryUiTooltip to the page and/or provide a custom jQuery selector, then just add &lt;strong&gt;JQueryUiTooltipContent&lt;/strong&gt; to these components&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JQueryUiTooltipContent&lt;/strong&gt; allows you to provide markup as tooltip content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// configure tooltips globally&lt;/span&gt;
page.add(tooltip_1_10_3(&lt;span class=&quot;string&quot;&gt;&quot;.with-tooltip&quot;&lt;/span&gt;).setItems(&lt;span class=&quot;string&quot;&gt;&quot;.with-tooltip&quot;&lt;/span&gt;));

&lt;span class=&quot;comment&quot;&gt;// static tooltip content from title/data-tooltip attributes&lt;/span&gt;
page.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Label(&lt;span class=&quot;string&quot;&gt;&quot;component1&quot;&lt;/span&gt;));
page.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Label(&lt;span class=&quot;string&quot;&gt;&quot;component2&quot;&lt;/span&gt;));

&lt;span class=&quot;comment&quot;&gt;// dynamic tooltip content written into data-tooltip attributes&lt;/span&gt;
page.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Label(&lt;span class=&quot;string&quot;&gt;&quot;component3&quot;&lt;/span&gt;).add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JQueryUiTooltipContent(&lt;span class=&quot;string&quot;&gt;&quot;dynamic tooltip content&quot;&lt;/span&gt;)));
page.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Label(&lt;span class=&quot;string&quot;&gt;&quot;component4&quot;&lt;/span&gt;).add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JQueryUiTooltipContent(anotherComponent)));
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;wicket:id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;component1&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;with-tooltip&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;tooltip content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;wicket:id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;component2&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;with-tooltip&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-tooltip&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;&amp;lt;strong&amp;gt;tooltip content&amp;lt;/strong&amp;gt;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;wicket:id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;component3&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;with-tooltip&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;wicket:id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;component4&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;with-tooltip&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated JavaScript looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Wicket.Event.add(window, &lt;span class=&quot;string&quot;&gt;&quot;domready&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; {&lt;/span&gt;
  $(&lt;span class=&quot;string&quot;&gt;'#component4'&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;'data-tooltip'&lt;/span&gt;,$(&lt;span class=&quot;string&quot;&gt;'#anotherComponent1'&lt;/span&gt;).html());
  $(&lt;span class=&quot;string&quot;&gt;'.with-tooltip'&lt;/span&gt;).tooltip({items:&lt;span class=&quot;string&quot;&gt;'.with-tooltip'&lt;/span&gt;}, ...);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;JQueryUiTooltipContent&lt;/strong&gt; allows you to use rich tooltip content by putting dynamic content into the &lt;strong&gt;data-tooltip&lt;/strong&gt; attribute of the element having a tooltip. You can provide the content as &lt;strong&gt;String&lt;/strong&gt; or even as a &lt;strong&gt;Wicket Component&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;More examples can be found &lt;a href=&quot;https://github.com/wicketstuff/core/wiki/jWicket-UI-Tooltip#usage&quot;&gt;on the wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wicketstuff.org/&quot;&gt;wicketstuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wicketstuff/core/tree/master/jdk-1.6-parent/jwicket-parent/jwicket-tooltip&quot;&gt;jWicket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wicketstuff/core/wiki/jWicket-UI-Tooltip&quot;&gt;jWicket-UI-Tooltip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jqueryui.com/tooltip/&quot;&gt;jQuery UI tooltip widget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Extending Apache Wicket pt. 1</title>
      <link>http://horsed.github.io/articles/first/</link>
      <pubDate>Sat, 08 Jun 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://horsed.github.io/articles/first/</guid>
      <author></author>
      <description>&lt;p&gt;Did you ever have had the need build bookmarkable Ajax components with Apache Wicket? Well, Wicket makes it easy to build Ajax components. But one thing they can’t do out of the box is manipulating the URL so you can render state to it. And by manipulating the URL I mean writing something to the URL fragment, because that is the only part of the URL you can change with JavaScript whithout causing a page reload by the browser.&lt;/p&gt;
&lt;p&gt;With a little bit of JavaScript, making an &lt;em&gt;AjaxLink&lt;/em&gt;, for example, changing the URL fragment isn’t that hard. You could use the &lt;em&gt;AjaxRequestTarget&lt;/em&gt; to execute the JavaScript, which handles the URL update:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AjaxLink&amp;lt;Void&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;link&quot;&lt;/span&gt;) {
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;(AjaxRequestTarget target) {
    &lt;span class=&quot;comment&quot;&gt;// handle click event&lt;/span&gt;
    target.appendJavascript(&lt;span class=&quot;string&quot;&gt;&quot;window.location.hash='#!clickedAjaxLink';&quot;&lt;/span&gt;);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s not too difficult, isn’t it? Well, that’s not a particularly difficult kind of state to render to the URL. What about rendering state with a key/value layout, e.g. &lt;code&gt;param1=value1&amp;amp;param2=value2&lt;/code&gt; or &lt;code&gt;param/value&lt;/code&gt;? You could build URLs that look like this: &lt;strong&gt;&lt;a href=&quot;http://yoursite.com/#!/email/inbox&quot;&gt;http://yoursite.com/#!/email/inbox&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For this, you would need more JavaScript, because you would want to set/add/remove certain parameters, define constants for the delimiters etc.&lt;/p&gt;
&lt;p&gt;What about &lt;strong&gt;reading&lt;/strong&gt; the URL fragment when a page gets requested with fragment state? Since the URL fragment doesn’t get sent to the server, you would have to read it after the initial page load and send it to the server (asynchronously). If you have components depending on this state, you would have to initialize them, when the fragment state arrives:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHomePage&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncUrlFragmentAwarePage&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHomePage&lt;/span&gt;(PageParameters parameters) {
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(parameters);
    add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebMarkupContainer(&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;).setOutputMarkupId(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;));
  }
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onParameterArrival&lt;/span&gt;(IRequestParameters requestParameters,
    AjaxRequestTarget target) {
    &lt;span class=&quot;comment&quot;&gt;// content based on URL fragment state&lt;/span&gt;
    ContentPanel content = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ContentPanel(&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;, requestParameters);
    content.setOutputMarkupId(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
    MyHomePage.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.replace(content);
    target.add(content);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I contributed the &lt;a href=&quot;https://github.com/wicketstuff/core/wiki/UrlFragment&quot;&gt;UrlFragment project&lt;/a&gt; to &lt;a href=&quot;http://wicketstuff.org/&quot;&gt;wicketstuff&lt;/a&gt;, which does all this.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>